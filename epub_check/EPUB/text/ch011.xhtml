<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="C" xml:lang="C">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch011.xhtml</title>
  <style>
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="アフィン型理論と借用" class="level1">
<h1>アフィン型理論と借用</h1>
<section id="はじめに-9" class="level2">
<h2>はじめに</h2>
<p>前章で学んだ借用システムは、実はアフィン型理論の巧妙な応用です。所有権がアフィン型（最大1回使用）であるのに対し、借用は「短期間の読み取り専用アクセス」または「短期間の排他的アクセス」を提供します。本節では、この借用メカニズムがどのようにアフィン型理論から導かれるか、その数学的基礎を探求します。</p>
</section>
<section id="アフィン型理論の復習" class="level2">
<h2>アフィン型理論の復習</h2>
<section id="基本概念-1" class="level3">
<h3>基本概念</h3>
<p>アフィン型システムでは、値は<strong>最大1回</strong>使用できます：</p>
<pre><code>構造規則:
- 弱化（Weakening）: OK - 値を使わないことは許される
- 縮約（Contraction）: NG - 値を複製することは許されない</code></pre>
</section>
<section id="型理論的表現" class="level3">
<h3>型理論的表現</h3>
<pre><code>Γ ⊢ e : τ
───────── (Affine-Use)
Γ \ {x:τ} ⊢ e&#39;

ここで、Γ \ {x:τ} は環境Γからx:τを除去</code></pre>
</section>
</section>
<section id="借用の型理論的基礎" class="level2">
<h2>借用の型理論的基礎</h2>
<section id="借用型の導入" class="level3">
<h3>借用型の導入</h3>
<p>Rustの借用は、型理論的には以下のように表現できます：</p>
<pre><code>τ ::= T           // 所有型
    | &amp;τ          // 共有参照（不変借用）
    | &amp;mut τ      // 排他参照（可変借用）</code></pre>
</section>
<section id="借用の生成規則" class="level3">
<h3>借用の生成規則</h3>
<pre><code>Γ ⊢ e : τ
─────────── (&amp;-intro)
Γ ⊢ &amp;e : &amp;τ

Γ ⊢ e : τ
──────────────── (&amp;mut-intro)
Γ ⊢ &amp;mut e : &amp;mut τ</code></pre>
</section>
</section>
<section id="借用とアフィン性の調和" class="level2">
<h2>借用とアフィン性の調和</h2>
<section id="問題アフィン型では値の共有ができない" class="level3">
<h3>問題：アフィン型では値の共有ができない</h3>
<p>純粋なアフィン型システムでは、値を複数回使用できません：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 純粋なアフィン型では不可能</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> x <span class="op">=</span> <span class="dt">String</span><span class="pp">::</span>from(<span class="st">&quot;hello&quot;</span>)<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>print_string(x)<span class="op">;</span>      <span class="co">// xの所有権が移動</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>print_string(x)<span class="op">;</span>      <span class="co">// エラー：xは既に使用済み</span></span></code></pre></div>
</section>
<section id="解決借用による短期間アクセス権" class="level3">
<h3>解決：借用による短期間アクセス権</h3>
<p>借用は、所有権を移動せずに値へのアクセスを提供します：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> x <span class="op">=</span> <span class="dt">String</span><span class="pp">::</span>from(<span class="st">&quot;hello&quot;</span>)<span class="op">;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>print_string(<span class="op">&amp;</span>x)<span class="op">;</span>     <span class="co">// xを借用</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>print_string(<span class="op">&amp;</span>x)<span class="op">;</span>     <span class="co">// 再度借用可能</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co">// xの所有権は維持される</span></span></code></pre></div>
</section>
</section>
<section id="借用の数学的モデル" class="level2">
<h2>借用の数学的モデル</h2>
<section id="能力capabilityベースの形式化" class="level3">
<h3>能力（Capability）ベースの形式化</h3>
<p>借用は「能力」として形式化できます：</p>
<pre><code>能力の種類:
- own(τ): τの所有権
- &amp;shared(τ): τへの共有アクセス権
- &amp;unique(τ): τへの排他アクセス権</code></pre>
</section>
<section id="分割可能性fractional-permissions" class="level3">
<h3>分割可能性（Fractional Permissions）</h3>
<p>共有借用は「分数的許可」として理解できます：</p>
<pre><code>own(τ) = 1         // 完全な所有権
&amp;shared(τ) = 1/n   // n個に分割可能な読み取り権
&amp;unique(τ) = 1     // 分割不可能な書き込み権</code></pre>
<p>実装例：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 所有権の分割と再結合のデモ</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> demonstrate_fractional_permissions() <span class="op">{</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> data <span class="op">=</span> <span class="pp">vec!</span>[<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>]<span class="op">;</span>  <span class="co">// own(Vec&lt;i32&gt;) = 1</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> r1 <span class="op">=</span> <span class="op">&amp;</span>data<span class="op">;</span>  <span class="co">// &amp;shared = 1/2</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> r2 <span class="op">=</span> <span class="op">&amp;</span>data<span class="op">;</span>  <span class="co">// &amp;shared = 1/2</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 合計: 1/2 + 1/2 = 1（ただし読み取りのみ）</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>        <span class="pp">println!</span>(<span class="st">&quot;{:?} {:?}&quot;</span><span class="op">,</span> r1<span class="op">,</span> r2)<span class="op">;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>  <span class="co">// 借用終了、所有権が戻る</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    data<span class="op">.</span>push(<span class="dv">4</span>)<span class="op">;</span>  <span class="co">// own = 1 が復活</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
</section>
<section id="借用チェッカーの理論" class="level2">
<h2>借用チェッカーの理論</h2>
<section id="領域regionベースの型システム" class="level3">
<h3>領域（Region）ベースの型システム</h3>
<p>借用チェッカーは、各借用に「領域」を割り当てます：</p>
<pre><code>型の拡張:
τ ::= T | &amp;&#39;r τ | &amp;&#39;r mut τ

ここで &#39;r は領域（ライフタイム）</code></pre>
</section>
<section id="領域の包含関係" class="level3">
<h3>領域の包含関係</h3>
<pre><code>&#39;a ⊆ &#39;b は「領域&#39;aは領域&#39;bに含まれる」を意味

推論規則:
Γ ⊢ e : &amp;&#39;a τ    &#39;a ⊆ &#39;b
────────────────────────── (Sub-Region)
Γ ⊢ e : &amp;&#39;b τ</code></pre>
</section>
</section>
<section id="借用の実装メカニズム" class="level2">
<h2>借用の実装メカニズム</h2>
<section id="コンパイル時の借用追跡" class="level3">
<h3>コンパイル時の借用追跡</h3>
<div class="sourceCode" id="cb12"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 借用チェッカーの内部動作を示す擬似コード</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> BorrowChecker <span class="op">{</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 各変数の借用状態</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    borrows<span class="op">:</span> HashMap<span class="op">&lt;</span>Variable<span class="op">,</span> BorrowState<span class="op">&gt;,</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> BorrowState <span class="op">{</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    NotBorrowed<span class="op">,</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    SharedBorrow(<span class="dt">Vec</span><span class="op">&lt;</span>Region<span class="op">&gt;</span>)<span class="op">,</span>  <span class="co">// 複数の共有借用</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    UniqueBorrow(Region)<span class="op">,</span>       <span class="co">// 単一の排他借用</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> BorrowChecker <span class="op">{</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> check_borrow(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> var<span class="op">:</span> Variable<span class="op">,</span> kind<span class="op">:</span> BorrowKind<span class="op">,</span> region<span class="op">:</span> Region) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>()<span class="op">,</span> <span class="bu">Error</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">match</span> (<span class="kw">self</span><span class="op">.</span>borrows<span class="op">.</span>get(<span class="op">&amp;</span>var)<span class="op">,</span> kind) <span class="op">{</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>            (<span class="cn">Some</span>(SharedBorrow(regions))<span class="op">,</span> <span class="pp">BorrowKind::</span>Shared) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 共有借用の追加はOK</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>                regions<span class="op">.</span>push(region)<span class="op">;</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>                <span class="cn">Ok</span>(())</span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>            (<span class="cn">Some</span>(NotBorrowed)<span class="op">,</span> _) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 新規借用はOK</span></span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>                <span class="kw">self</span><span class="op">.</span>borrows<span class="op">.</span>insert(var<span class="op">,</span> kind<span class="op">.</span>to_state(region))<span class="op">;</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>                <span class="cn">Ok</span>(())</span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="cn">Err</span>(<span class="bu">Error</span><span class="pp">::</span>ConflictingBorrow)<span class="op">,</span></span>
<span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
<section id="実際の借用チェックの例" class="level3">
<h3>実際の借用チェックの例</h3>
<div class="sourceCode" id="cb13"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> borrow_checking_example() <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> x <span class="op">=</span> <span class="dv">5</span><span class="op">;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// フェーズ1: 共有借用</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r1 <span class="op">=</span> <span class="op">&amp;</span>x<span class="op">;</span>        <span class="co">// 借用開始: SharedBorrow([&#39;a])</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r2 <span class="op">=</span> <span class="op">&amp;</span>x<span class="op">;</span>        <span class="co">// OK: SharedBorrow([&#39;a, &#39;b])</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{} {}&quot;</span><span class="op">,</span> r1<span class="op">,</span> r2)<span class="op">;</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// r1, r2のスコープ終了 → NotBorrowed</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// フェーズ2: 排他借用</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r3 <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> x<span class="op">;</span>    <span class="co">// OK: UniqueBorrow([&#39;c])</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>r3 <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// r3のスコープ終了 → NotBorrowed</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">// フェーズ3: 再び使用可能</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span> x)<span class="op">;</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
</section>
<section id="高度な借用パターン" class="level2">
<h2>高度な借用パターン</h2>
<section id="リバース借用reborrowing" class="level3">
<h3>リバース借用（Reborrowing）</h3>
<div class="sourceCode" id="cb14"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> reborrowing_demo() <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> x <span class="op">=</span> <span class="pp">vec!</span>[<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>]<span class="op">;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r1 <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> x<span class="op">;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// リバース借用：r1から新しい借用を作成</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r2 <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="op">*</span>r1<span class="op">;</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    r2<span class="op">.</span>push(<span class="dv">4</span>)<span class="op">;</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// r2のスコープ終了後、r1が再び使用可能</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    r1<span class="op">.</span>push(<span class="dv">5</span>)<span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
<section id="分割借用split-borrowing" class="level3">
<h3>分割借用（Split Borrowing）</h3>
<div class="sourceCode" id="cb15"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Pair <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    first<span class="op">:</span> <span class="dt">String</span><span class="op">,</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    second<span class="op">:</span> <span class="dt">String</span><span class="op">,</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> split_borrow_demo() <span class="op">{</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> pair <span class="op">=</span> Pair <span class="op">{</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>        first<span class="op">:</span> <span class="dt">String</span><span class="pp">::</span>from(<span class="st">&quot;hello&quot;</span>)<span class="op">,</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>        second<span class="op">:</span> <span class="dt">String</span><span class="pp">::</span>from(<span class="st">&quot;world&quot;</span>)<span class="op">,</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 異なるフィールドの同時借用</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r1 <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> pair<span class="op">.</span>first<span class="op">;</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r2 <span class="op">=</span> <span class="op">&amp;</span>pair<span class="op">.</span>second<span class="op">;</span>  <span class="co">// OK: 異なるフィールド</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a>    r1<span class="op">.</span>push_str(<span class="st">&quot; rust&quot;</span>)<span class="op">;</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span> r2)<span class="op">;</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
</section>
<section id="理論と実装の橋渡し" class="level2">
<h2>理論と実装の橋渡し</h2>
<section id="コンパイラの改良" class="level3">
<h3>コンパイラの改良</h3>
<p>借用チェッカーは、理論的な正しさを保ちながら実用性を追求：</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Non-Lexical Lifetimes (NLL) の効果</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> nll_improvement() <span class="op">{</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> vec <span class="op">=</span> <span class="pp">vec!</span>[<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>]<span class="op">;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r <span class="op">=</span> <span class="op">&amp;</span>vec[<span class="dv">0</span>]<span class="op">;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span> r)<span class="op">;</span>  <span class="co">// rの最後の使用</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// NLL以前: ここでエラー</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// NLL以降: rのライフタイムが終了しているのでOK</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>    vec<span class="op">.</span>push(<span class="dv">4</span>)<span class="op">;</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
<section id="two-phase-borrowing" class="level3">
<h3>Two-Phase Borrowing</h3>
<div class="sourceCode" id="cb17"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> two_phase_borrowing() <span class="op">{</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> vec <span class="op">=</span> <span class="pp">vec!</span>[<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>]<span class="op">;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// フェーズ1: 予約（まだ排他的アクセスしない）</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// フェーズ2: 活性化（実際に使用）</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>    vec<span class="op">.</span>push(vec<span class="op">.</span>len())<span class="op">;</span>  <span class="co">// vec.len()は共有借用、pushは可変借用</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
</section>
<section id="借用とスレッド安全性" class="level2">
<h2>借用とスレッド安全性</h2>
<section id="send-と-sync-トレイト" class="level3">
<h3>Send と Sync トレイト</h3>
<div class="sourceCode" id="cb18"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Sendトレイト: 所有権の転送が安全</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co">// Syncトレイト: 共有参照(&amp;T)の共有が安全</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::</span>thread<span class="op">;</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::sync::</span>Arc<span class="op">;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> thread_safety_demo() <span class="op">{</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> data <span class="op">=</span> <span class="pp">Arc::</span>new(<span class="pp">vec!</span>[<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>])<span class="op">;</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> data_clone <span class="op">=</span> <span class="pp">Arc::</span>clone(<span class="op">&amp;</span>data)<span class="op">;</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>    <span class="pp">thread::</span>spawn(<span class="kw">move</span> <span class="op">||</span> <span class="op">{</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Arcは共有参照を安全に共有</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>        <span class="pp">println!</span>(<span class="st">&quot;{:?}&quot;</span><span class="op">,</span> data_clone)<span class="op">;</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{:?}&quot;</span><span class="op">,</span> data)<span class="op">;</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
</section>
<section id="形式的検証" class="level2">
<h2>形式的検証</h2>
<section id="借用チェッカーの健全性" class="level3">
<h3>借用チェッカーの健全性</h3>
<p>借用チェッカーは以下を保証：</p>
<ol type="1">
<li><strong>メモリ安全性</strong>: ダングリング参照なし</li>
<li><strong>データ競合なし</strong>: 可変参照の排他性</li>
<li><strong>型安全性</strong>: 借用を通じた型の保持</li>
</ol>
<p>形式的には：</p>
<pre><code>定理（借用の健全性）:
プログラムPが借用チェッカーを通過するならば、
Pの実行中に以下が成立：
1. すべての参照は有効なメモリを指す
2. 可変参照を通じたアクセスは排他的
3. 型の不変条件が保持される</code></pre>
</section>
</section>
<section id="まとめ-7" class="level2">
<h2>まとめ</h2>
<p>借用システムは、アフィン型理論を実用的に拡張したものです：</p>
<ol type="1">
<li><strong>理論的基礎</strong>: アフィン型に「短期間アクセス」の概念を追加</li>
<li><strong>実装</strong>: コンパイル時の静的解析による安全性保証</li>
<li><strong>実用性</strong>: 分割借用、リバース借用などの高度なパターン</li>
</ol>
<p>この巧妙な設計により、Rustは「所有権による安全性」と「借用による柔軟性」を両立させています。</p>
<p>次節では、借用と密接に関連する「ライフタイム」の理論的基礎について詳しく見ていきます。</p>
</section>
<section id="公式ドキュメント参照-8" class="level2">
<h2>公式ドキュメント参照</h2>
<ul>
<li><strong>Reference</strong>: Section 10.3 - Reference types</li>
<li><strong>Rustonomicon</strong>: Chapter 3.4 - Splitting Borrows</li>
<li><strong>RFC 2094</strong>: Non-lexical lifetimes</li>
<li><strong>RFC 2025</strong>: Two-phase borrows</li>
</ul>
</section>
</section>
</body>
</html>
